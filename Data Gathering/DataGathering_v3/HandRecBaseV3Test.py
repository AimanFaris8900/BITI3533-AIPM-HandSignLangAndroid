import cv2
import mediapipe as mp
import time
import math


alpha_log = ['']*5
curr_alpha = ''
sd = 8

datas = [
            # Letter 'A'
            [
                [100, 100], [50, 58], [40, 46], [30, 34], [71, 79], [25, 35], [30, 40], [11, 23], [16, 28], [19, 29],
                [39, 47], [3, 15], [22, 32], [14, 26], [38, 44], [2, 14], [23, 35], [12, 24], [26, 32], [4, 14],
                [19, 31], [56, 76], [19, 27], [21, 25], [19, 23], [43, 53], [65, 77], [90, 106], [118, 134], [25, 37],
                [26, 40], [49, 61], [74, 86], [43, 55], [33, 41], [31, 41], [54, 62], [61, 77], [54, 62], [33, 43],
                [36, 44], [80, 100], [70, 82], [49, 57], [28, 36]
            ],
            # Letter 'B'
            [
                [100, 100], [35, 43], [31, 35], [24, 28], [49, 57], [31, 39], [20, 24], [17, 21], [68, 82], [35, 43],
                [23, 27], [20, 24], [77, 93], [33, 41], [21, 25], [17, 23], [72, 88], [26, 32], [17, 21], [15, 19],
                [59, 71], [76, 88], [23, 27], [15, 25], [24, 34], [30, 42], [13, 21], [4, 8], [19, 31], [100, 122],
                [65, 77], [72, 88], [87, 107], [118, 142], [85, 103], [80, 98], [93, 113], [118, 138], [85, 101], [73, 87],
                [80, 100], [105, 123], [75, 91], [59, 73], [54, 66]
            ],
            # Letter 'C'
            [
                [100, 100], [33, 45], [25, 33], [17, 33], [42, 66], [31, 51], [21, 33], [15, 27], [47, 97], [40, 60],
                [28, 36], [19, 27], [56, 112], [38, 58], [25, 37], [20, 28], [65, 97], [30, 46], [21, 29], [14, 26],
                [62, 82], [25, 81], [-6, 34], [-3, 33], [9, 25], [56, 102], [63, 117], [70, 124], [66, 130], [64, 116],
                [53, 107], [62, 114], [71, 117], [59, 139], [49, 105], [65, 117], [73, 121], [47, 127], [45, 89], [54, 94],
                [70, 102], [38, 110], [31, 79], [39, 83], [50, 86]
            ],
            # Letter 'D'
            [
                [100, 100], [33, 43], [23, 35], [21, 29], [40, 60], [39, 47], [22, 30], [21, 25], [83, 99], [26, 38],
                [28, 38], [18, 22], [18, 40], [14, 30], [29, 37], [7, 19], [28, 52], [9, 33], [20, 28], [4, 14],
                [25, 53], [82, 118], [107, 129], [20, 34], [13, 21], [-5, 35], [15, 35], [25, 65], [52, 86], [133, 157],
                [90, 110], [107, 131], [128, 160], [30, 42], [21, 35], [32, 52], [51, 71], [30, 48], [42, 66], [34, 54],
                [35, 59], [44, 60], [52, 84], [43, 67], [29, 57]
            ],
            # Letter 'E'
            [
                [100, 100], [42, 50], [27, 35], [23, 31], [42, 50], [29, 41], [22, 34], [15, 23], [10, 18], [29, 41],
                [30, 38], [14, 18], [11, 21], [23, 37], [28, 36], [12, 18], [16, 24], [20, 28], [20, 24], [10, 14],
                [18, 22], [14, 32], [19, 27], [16, 24], [19, 23], [15, 31], [9, 25], [20, 44], [42, 70], [27, 47],
                [26, 36], [45, 61], [68, 88], [40, 52], [19, 27], [28, 36], [49, 61], [51, 61], [39, 45], [21, 29],
                [34, 42], [70, 78], [58, 66], [37, 45], [19, 25]
            ],
            # Letter 'F'
            [
                [100, 100], [36, 36], [26, 28], [21, 27], [35, 55], [27, 35], [11, 19], [15, 19], [7, 15], [38, 46],
                [24, 28], [24, 26], [86, 98], [37, 41], [24, 26], [22, 24], [83, 91], [31, 31], [20, 20], [17, 21],
                [69, 73], [6, 18], [97, 109], [19, 23], [30, 36], [19, 27], [38, 44], [54, 66], [74, 86], [40, 48],
                [23, 35], [44, 52], [65, 73], [140, 152], [93, 105], [93, 105], [109, 121], [135, 151], [92, 100], [82, 88],
                [97, 105], [115, 139], [80, 84], [65, 69], [60, 64]
            ],
            # Letter 'G'
            [
                [100, 100], [38, 56], [29, 47], [23, 33], [51, 79], [45, 69], [29, 37], [21, 31], [93, 137], [31, 75],
                [10, 18], [8, 26], [8, 52], [14, 60], [13, 19], [13, 21], [-8, 32], [4, 40], [11, 17], [11, 15],
                [-2, 26], [61, 85], [75, 111], [13, 49], [17, 29], [46, 72], [21, 69], [20, 82], [39, 103], [111, 147],
                [87, 139], [94, 150], [110, 166], [28, 72], [31, 69], [1, 63], [26, 84], [38, 66], [57, 69], [32, 40],
                [3, 51], [52, 84], [74, 90], [44, 64], [19, 35]
            ],
            # Letter 'H'
            [
                [100, 100], [43, 51], [33, 45], [25, 33], [57, 77], [53, 65], [30, 36], [23, 31], [106, 132], [55, 71],
                [33, 41], [26, 32], [116, 142], [39, 63], [9, 25], [15, 23], [-20, 76], [26, 44], [8, 20], [11, 19],
                [-21, 61], [76, 92], [23, 31], [60, 160], [17, 33], [46, 86], [32, 64], [36, 56], [55, 75], [121, 147],
                [104, 130], [113, 141], [129, 161], [135, 161], [122, 150], [118, 146], [130, 162], [17, 109], [41, 107], [10, 86],
                [-5, 87], [37, 109], [65, 113], [34, 90], [-1, 67]
            ],
            # Letter 'K'
            [
                [100, 100], [48, 54], [40, 44], [30, 34], [70, 76], [41, 57], [30, 34], [25, 29], [96, 120], [29, 43],
                [19, 31], [20, 26], [47, 113], [6, 26], [34, 38], [24, 28], [49, 57], [7, 29], [27, 31], [19, 23],
                [44, 58], [55, 79], [45, 85], [73, 185], [14, 18], [40, 48], [47, 55], [67, 75], [91, 99], [123, 147],
                [103, 131], [119, 151], [140, 174], [56, 164], [34, 130], [63, 117], [84, 132], [40, 48], [52, 68], [51, 57],
                [52, 68], [52, 66], [59, 83], [51, 67], [45, 57]
            ],
            # Letter 'L'
            [
                [100, 100], [41, 49], [32, 38], [26, 30], [59, 67], [38, 46], [27, 31], [22, 26], [88, 102], [12, 22],
                [33, 37], [14, 18], [46, 64], [14, 26], [28, 32], [9, 13], [44, 58], [10, 22], [22, 26], [7, 11],
                [36, 44], [138, 166], [138, 158], [18, 22], [16, 20], [83, 107], [111, 135], [137, 157], [160, 180], [143, 159],
                [88, 108], [105, 129], [129, 153], [44, 58], [43, 67], [55, 63], [66, 74], [64, 76], [54, 78], [46, 68],
                [51, 59], [82, 94], [63, 87], [50, 70], [38, 52]
            ],
            # Letter 'M'
            [
                [100, 100], [31, 43], [16, 24], [1, 25], [17, 39], [43, 55], [25, 33], [11, 15], [60, 94], [55, 91],
                [17, 25], [11, 21], [64, 82], [53, 89], [11, 17], [9, 21], [56, 70], [41, 73], [4, 12], [8, 18],
                [44, 52], [24, 40], [20, 60], [20, 28], [18, 26], [35, 63], [42, 78], [54, 94], [68, 116], [-5, 45],
                [67, 107], [75, 115], [85, 129], [15, 37], [67, 91], [60, 76], [63, 79], [37, 61], [83, 103], [71, 87],
                [47, 63], [55, 87], [99, 119], [82, 98], [61, 73]
            ],
            # Letter 'N'
            [
                [100, 100], [26, 34], [16, 20], [11, 21], [28, 38], [41, 53], [28, 36], [16, 18], [64, 88], [44, 60],
                [28, 32], [12, 16], [68, 88], [48, 64], [19, 23], [4, 10], [63, 75], [41, 53], [10, 14], [6, 10],
                [46, 54], [27, 61], [9, 21], [21, 31], [14, 24], [27, 55], [32, 52], [33, 59], [41, 75], [13, 23],
                [69, 93], [73, 93], [74, 98], [3, 17], [66, 88], [67, 83], [64, 84], [21, 37], [75, 99], [72, 90],
                [52, 64], [38, 54], [84, 108], [78, 94], [64, 72]
            ],
            # Letter 'O'
            [
                [100, 100], [36, 44], [28, 32], [22, 30], [49, 59], [32, 42], [19, 29], [17, 21], [46, 70], [38, 50],
                [25, 33], [21, 25], [53, 81], [40, 48], [27, 35], [22, 26], [58, 86], [34, 42], [23, 29], [17, 23],
                [61, 81], [14, 22], [1, 5], [0, 10], [5, 11], [55, 77], [65, 89], [78, 94], [84, 96], [58, 70],
                [57, 81], [67, 89], [75, 91], [58, 68], [44, 70], [64, 88], [75, 89], [57, 65], [38, 68], [47, 79],
                [68, 88], [54, 68], [35, 59], [41, 73], [51, 79]
            ],
            # Letter 'P'
            [
                [100, 100], [31, 47], [37, 43], [30, 36], [67, 79], [58, 68], [32, 38], [27, 35], [117, 137], [51, 67],
                [33, 45], [24, 28], [97, 133], [45, 59], [27, 35], [16, 20], [81, 97], [31, 43], [21, 25], [13, 17],
                [61, 77], [84, 98], [121, 137], [-2, 50], [7, 19], [67, 75], [55, 75], [42, 70], [34, 62], [152, 168],
                [106, 132], [100, 128], [101, 125], [74, 102], [109, 129], [83, 129], [71, 123], [46, 82], [89, 113], [94, 102],
                [71, 91], [30, 74], [75, 101], [82, 90], [71, 83]
            ],
            # Letter 'Q'
            [
                [100, 100], [37, 53], [34, 50], [26, 42], [62, 90], [45, 81], [5, 53], [16, 38], [30, 166], [55, 79],
                [24, 40], [11, 35], [59, 125], [43, 71], [20, 32], [14, 22], [47, 73], [32, 56], [16, 24], [12, 20],
                [39, 57], [56, 154], [70, 170], [0, 120], [7, 19], [81, 125], [94, 148], [96, 162], [93, 165], [41, 213],
                [46, 158], [54, 156], [53, 153], [25, 167], [33, 125], [61, 133], [58, 138], [39, 67], [19, 43], [40, 64],
                [46, 74], [44, 80], [8, 32], [30, 50], [39, 55]
            ],
            # Letter 'R'
            [
                [100, 100], [36, 44], [31, 35], [25, 29], [56, 62], [37, 41], [24, 28], [22, 26], [84, 92], [47, 51],
                [26, 30], [20, 24], [94, 104], [23, 31], [29, 33], [23, 25], [30, 42], [20, 24], [24, 28], [18, 22],
                [37, 45], [69, 75], [10, 22], [125, 145], [12, 20], [16, 24], [12, 20], [30, 38], [52, 64], [123, 135],
                [80, 92], [91, 101], [110, 122], [132, 144], [93, 103], [107, 115], [126, 136], [25, 29], [34, 46], [30, 42],
                [39, 47], [34, 42], [54, 58], [48, 52], [41, 45]
            ],
            # Letter 'S'
            [
                [100, 100], [43, 47], [34, 38], [28, 32], [57, 61], [27, 37], [31, 35], [10, 18], [13, 17], [22, 34],
                [38, 42], [8, 12], [18, 22], [18, 28], [37, 41], [6, 14], [21, 29], [15, 27], [24, 28], [5, 13],
                [20, 24], [21, 33], [19, 23], [20, 24], [17, 21], [11, 19], [10, 26], [36, 46], [62, 72], [29, 37],
                [27, 31], [48, 52], [72, 76], [38, 50], [24, 32], [30, 34], [51, 55], [52, 64], [47, 51], [31, 35],
                [33, 41], [72, 80], [61, 69], [43, 47], [26, 28]
            ],
            # Letter 'T'
            [
                [100, 100], [43, 51], [38, 42], [27, 33], [65, 75], [29, 37], [22, 26], [19, 25], [11, 23], [25, 29],
                [33, 43], [12, 16], [22, 38], [19, 23], [35, 39], [10, 14], [30, 42], [20, 24], [24, 28], [9, 13],
                [25, 29], [44, 54], [21, 33], [21, 27], [19, 21], [30, 36], [35, 45], [56, 66], [79, 91], [17, 25],
                [31, 43], [50, 66], [71, 89], [24, 32], [25, 39], [35, 47], [52, 64], [40, 56], [46, 62], [35, 47],
                [40, 46], [60, 76], [60, 76], [45, 53], [29, 35]
            ],
            # Letter 'U'
            [
                [100, 100], [33, 37], [25, 29], [23, 27], [47, 55], [36, 42], [23, 27], [20, 24], [80, 92], [44, 52],
                [26, 30], [21, 25], [91, 107], [35, 43], [22, 28], [20, 22], [21, 29], [25, 29], [20, 24], [17, 21],
                [37, 41], [79, 95], [19, 23], [107, 115], [25, 33], [5, 9], [11, 19], [31, 39], [52, 60], [127, 147],
                [81, 93], [96, 108], [117, 129], [141, 165], [93, 109], [103, 119], [123, 139], [36, 56], [17, 21], [7, 19],
                [39, 47], [28, 32], [40, 48], [37, 45], [33, 41]
            ],
            # Letter 'V'
            [
                [100, 100], [27, 31], [20, 24], [21, 25], [40, 48], [39, 43], [23, 27], [20, 24], [83, 91], [46, 50],
                [27, 31], [22, 26], [95, 107], [30, 34], [23, 27], [19, 23], [18, 30], [17, 27], [18, 22], [16, 20],
                [33, 35], [88, 120], [54, 80], [109, 125], [15, 29], [4, 30], [20, 28], [29, 41], [42, 58], [131, 155],
                [90, 100], [107, 121], [127, 145], [152, 176], [101, 117], [103, 115], [121, 135], [40, 56], [15, 31], [15, 19],
                [35, 45], [33, 37], [32, 52], [29, 45], [27, 37]
            ],
            # Letter 'W'
            [
                [100, 100], [25, 29], [23, 31], [26, 26], [49, 57], [39, 43], [23, 27], [20, 24], [85, 93], [43, 47],
                [26, 30], [21, 25], [91, 101], [36, 40], [23, 31], [20, 24], [81, 93], [22, 26], [11, 15], [12, 16],
                [6, 38], [98, 122], [44, 68], [45, 55], [93, 103], [13, 45], [20, 28], [12, 34], [14, 46], [134, 150],
                [90, 98], [104, 116], [124, 138], [151, 169], [99, 111], [99, 111], [117, 129], [142, 166], [98, 114], [82, 94],
                [92, 104], [57, 65], [20, 52], [6, 36], [15, 21]
            ],
            # Letter 'X'
            [
                [100, 100], [36, 40], [27, 35], [22, 30], [49, 61], [30, 42], [1, 17], [7, 17], [24, 48], [9, 25],
                [32, 44], [7, 15], [37, 69], [5, 33], [27, 37], [6, 10], [33, 61], [7, 31], [23, 29], [5, 9],
                [27, 55], [46, 58], [76, 94], [20, 24], [20, 24], [18, 36], [10, 38], [31, 55], [54, 78], [88, 110],
                [24, 52], [50, 74], [78, 102], [31, 47], [43, 67], [44, 72], [61, 81], [50, 70], [57, 77], [41, 67],
                [42, 64], [69, 91], [74, 96], [53, 79], [34, 64]
            ],
            # Letter 'Y'
            [
                [100, 100], [49, 53], [39, 43], [30, 32], [66, 74], [11, 35], [25, 33], [22, 26], [18, 54], [8, 20],
                [31, 39], [20, 28], [46, 58], [11, 23], [31, 35], [23, 27], [40, 56], [34, 42], [25, 29], [24, 28],
                [85, 97], [95, 115], [12, 36], [10, 14], [137, 149], [73, 89], [102, 114], [127, 139], [149, 163], [48, 60],
                [21, 49], [41, 53], [60, 68], [61, 65], [51, 67], [50, 58], [60, 66], [70, 78], [49, 75], [38, 62],
                [51, 57], [183, 201], [134, 142], [110, 122], [93, 107]
            ]
        ]
alphas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'K', 'L', 'M', 'N',
          'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y']


def main():
    global alpha_log, curr_alpha, datas
    windowName = "Hand Tracker"
    cap = cv2.VideoCapture(0)
    mpHands = mp.solutions.hands
    hands = mpHands.Hands(max_num_hands=1)
    mpDraw = mp.solutions.drawing_utils
    pTime = time.time()
    succ = True
    alpha_sim = False

    while succ:
        (succ, img) = cap.read()
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        output = hands.process(imgRGB)
        dist = []
        update_log = False
        curr_alpha = ''
        # print(alpha_log)

        if output.multi_hand_landmarks:
            lst = []
            lst_2 = []
            for handPoints in output.multi_hand_landmarks:
                lst_2.clear()
                mpDraw.draw_landmarks(img, handPoints, mpHands.HAND_CONNECTIONS)
                for id, lm in enumerate(handPoints.landmark):
                    h, w, c = img.shape
                    cx, cy = int(lm.x * w), int(lm.y * h)
                    lst_2.append((cx, cy))
                lst.append(lst_2)

            # Hand Sign Start Here
            i = 0
            for hand in lst:
                dist.append(calc_dist(hand))
                update_log = hand_rule(dist[i])
                i = i + 1
            i = 0

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        if not update_log:
            alpha_log.pop(0)
            alpha_log.append('')

        for i in range(0, len(alpha_log)-1):
            if curr_alpha == alpha_log[i]:
                alpha_sim = True

        if not alpha_sim:
            print(curr_alpha)
        alpha_sim = False

        cv2.putText(img, "FPS: " + str(int(fps)), (10, 35), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 255), 3)
        cv2.imshow(windowName, img)
        pressedKey = cv2.waitKey(1) & 0xFF

        if pressedKey == 10 or pressedKey == 13 or pressedKey == 32:
            print("Print Hand Points")

            for hand in dist:
                for i in range(1, len(hand)-1):
                    print("Distance ", i, ": ", hand[i])
                print()
            print()

            """
            if output.multi_hand_landmarks:
                for handPoints in output.multi_hand_landmarks:
                    for id, lm in enumerate(handPoints.landmark):
                        h, w, c = img.shape
                        cx, cy = int(lm.x*w), int(lm.y*h)
                        #print("Point ", id, "\t: ", cx, "\t", cy)
                    print()
                print()
            print()
            """
        elif pressedKey == 27:
            succ = False
        elif cv2.getWindowProperty(windowName, cv2.WND_PROP_VISIBLE) < 1:
            succ = False

    cv2.destroyAllWindows()


def hand_rule(dist):
    global i, alpha_log, curr_alpha, datas
    curr_alpha = ''
    for i, data in enumerate(datas):
    # Error +15
        if (data[1][0] - sd < dist[1] < data[1][1] + sd and data[2][0] - sd < dist[2] < data[2][1] + sd and
                data[3][0] - sd < dist[3] < data[3][1] + sd and data[4][0] - sd < dist[4] < data[4][1] + sd and
                data[5][0] - sd < dist[5] < data[5][1] + sd and data[6][0] - sd < dist[6] < data[6][1] + sd and
                data[7][0] - sd < dist[7] < data[7][1] + sd and data[8][0] - sd < dist[8] < data[8][1] + sd and
                data[9][0] - sd < dist[9] < data[9][1] + sd and data[10][0] - sd < dist[10] < data[10][1] + sd and
                data[11][0] - sd < dist[11] < data[11][1] + sd and data[12][0] - sd < dist[12] < data[12][1] + sd and
                data[13][0] - sd < dist[13] < data[13][1] + sd and data[14][0] - sd < dist[14] < data[14][1] + sd and
                data[15][0] - sd < dist[15] < data[15][1] + sd and data[16][0] - sd < dist[16] < data[16][1] + sd and
                data[17][0] - sd < dist[17] < data[17][1] + sd and data[18][0] - sd < dist[18] < data[18][1] + sd and
                data[19][0] - sd < dist[19] < data[19][1] + sd and data[20][0] - sd < dist[20] < data[20][1] + sd and
                data[21][0] - sd < dist[21] < data[21][1] + sd and data[22][0] - sd < dist[22] < data[22][1] + sd and
                data[23][0] - sd < dist[23] < data[23][1] + sd and data[24][0] - sd < dist[24] < data[24][1] + sd and

                data[25][0] - sd < dist[25] < data[25][1] + sd and data[26][0] - sd < dist[26] < data[26][1] + sd and
                data[27][0] - sd < dist[27] < data[27][1] + sd and data[28][0] - sd < dist[28] < data[28][1] + sd and
                data[29][0] - sd < dist[29] < data[29][1] + sd and data[30][0] - sd < dist[30] < data[30][1] + sd and
                data[31][0] - sd < dist[31] < data[31][1] + sd and data[32][0] - sd < dist[32] < data[32][1] + sd and
                data[33][0] - sd < dist[33] < data[33][1] + sd and data[20][0] - sd < dist[34] < data[34][1] + sd and
                data[35][0] - sd < dist[35] < data[35][1] + sd and data[22][0] - sd < dist[36] < data[36][1] + sd and
                data[37][0] - sd < dist[37] < data[37][1] + sd and data[24][0] - sd < dist[38] < data[38][1] + sd and
                data[39][0] - sd < dist[39] < data[39][1] + sd and data[40][0] - sd < dist[40] < data[40][1] + sd and
                data[41][0] - sd < dist[41] < data[41][1] + sd and data[42][0] - sd < dist[42] < data[42][1] + sd and
                data[43][0] - sd < dist[43] < data[43][1] + sd and data[44][0] - sd < dist[44] < data[44][1] + sd):
            curr_alpha = alphas[i]

    alpha_log.pop(0)
    alpha_log.append(curr_alpha)

    return True


def calc_dist(hand):
    global datas
    dist = [0] * len(datas[0])
    # 0 is distance for ratio
    dist[0] = math.sqrt(math.pow((hand[0][0] - hand[9][0]), 2) + math.pow((hand[0][1] - hand[9][1]), 2))

    # 1-24 is distance for rule purpose
    dist[1] = math.sqrt(math.pow((hand[1][0] - hand[2][0]), 2) + math.pow((hand[1][1] - hand[2][1]), 2))
    dist[2] = math.sqrt(math.pow((hand[2][0] - hand[3][0]), 2) + math.pow((hand[2][1] - hand[3][1]), 2))
    dist[3] = math.sqrt(math.pow((hand[3][0] - hand[4][0]), 2) + math.pow((hand[3][1] - hand[4][1]), 2))
    dist[4] = math.sqrt(math.pow((hand[2][0] - hand[4][0]), 2) + math.pow((hand[2][1] - hand[4][1]), 2))
    dist[5] = math.sqrt(math.pow((hand[5][0] - hand[6][0]), 2) + math.pow((hand[5][1] - hand[6][1]), 2))
    dist[6] = math.sqrt(math.pow((hand[6][0] - hand[7][0]), 2) + math.pow((hand[6][1] - hand[7][1]), 2))
    dist[7] = math.sqrt(math.pow((hand[7][0] - hand[8][0]), 2) + math.pow((hand[7][1] - hand[8][1]), 2))
    dist[8] = math.sqrt(math.pow((hand[5][0] - hand[8][0]), 2) + math.pow((hand[5][1] - hand[8][1]), 2))
    dist[9] = math.sqrt(math.pow((hand[9][0] - hand[10][0]), 2) + math.pow((hand[9][1] - hand[10][1]), 2))
    dist[10] = math.sqrt(math.pow((hand[10][0] - hand[11][0]), 2) + math.pow((hand[10][1] - hand[11][1]), 2))
    dist[11] = math.sqrt(math.pow((hand[11][0] - hand[12][0]), 2) + math.pow((hand[11][1] - hand[12][1]), 2))
    dist[12] = math.sqrt(math.pow((hand[9][0] - hand[12][0]), 2) + math.pow((hand[9][1] - hand[12][1]), 2))
    dist[13] = math.sqrt(math.pow((hand[13][0] - hand[14][0]), 2) + math.pow((hand[13][1] - hand[14][1]), 2))
    dist[14] = math.sqrt(math.pow((hand[14][0] - hand[15][0]), 2) + math.pow((hand[14][1] - hand[15][1]), 2))
    dist[15] = math.sqrt(math.pow((hand[15][0] - hand[16][0]), 2) + math.pow((hand[15][1] - hand[16][1]), 2))
    dist[16] = math.sqrt(math.pow((hand[13][0] - hand[16][0]), 2) + math.pow((hand[13][1] - hand[16][1]), 2))
    dist[17] = math.sqrt(math.pow((hand[17][0] - hand[18][0]), 2) + math.pow((hand[17][1] - hand[18][1]), 2))
    dist[18] = math.sqrt(math.pow((hand[18][0] - hand[19][0]), 2) + math.pow((hand[18][1] - hand[19][1]), 2))
    dist[19] = math.sqrt(math.pow((hand[19][0] - hand[20][0]), 2) + math.pow((hand[19][1] - hand[20][1]), 2))
    dist[20] = math.sqrt(math.pow((hand[17][0] - hand[20][0]), 2) + math.pow((hand[17][1] - hand[20][1]), 2))
    dist[21] = math.sqrt(math.pow((hand[4][0] - hand[8][0]), 2) + math.pow((hand[4][1] - hand[8][1]), 2))
    dist[22] = math.sqrt(math.pow((hand[8][0] - hand[12][0]), 2) + math.pow((hand[8][1] - hand[12][1]), 2))
    dist[23] = math.sqrt(math.pow((hand[12][0] - hand[16][0]), 2) + math.pow((hand[12][1] - hand[16][1]), 2))
    dist[24] = math.sqrt(math.pow((hand[16][0] - hand[20][0]), 2) + math.pow((hand[16][1] - hand[20][1]), 2))

    dist[25] = math.sqrt(math.pow((hand[4][0] - hand[5][0]), 2) + math.pow((hand[4][1] - hand[5][1]), 2))
    dist[26] = math.sqrt(math.pow((hand[4][0] - hand[9][0]), 2) + math.pow((hand[4][1] - hand[9][1]), 2))
    dist[27] = math.sqrt(math.pow((hand[4][0] - hand[13][0]), 2) + math.pow((hand[4][1] - hand[13][1]), 2))
    dist[28] = math.sqrt(math.pow((hand[4][0] - hand[17][0]), 2) + math.pow((hand[4][1] - hand[17][1]), 2))
    dist[29] = math.sqrt(math.pow((hand[8][0] - hand[2][0]), 2) + math.pow((hand[8][1] - hand[2][1]), 2))
    dist[30] = math.sqrt(math.pow((hand[8][0] - hand[9][0]), 2) + math.pow((hand[8][1] - hand[9][1]), 2))
    dist[31] = math.sqrt(math.pow((hand[8][0] - hand[13][0]), 2) + math.pow((hand[8][1] - hand[13][1]), 2))
    dist[32] = math.sqrt(math.pow((hand[8][0] - hand[17][0]), 2) + math.pow((hand[8][1] - hand[17][1]), 2))
    dist[33] = math.sqrt(math.pow((hand[12][0] - hand[2][0]), 2) + math.pow((hand[12][1] - hand[2][1]), 2))
    dist[34] = math.sqrt(math.pow((hand[12][0] - hand[5][0]), 2) + math.pow((hand[12][1] - hand[5][1]), 2))
    dist[35] = math.sqrt(math.pow((hand[12][0] - hand[13][0]), 2) + math.pow((hand[12][1] - hand[13][1]), 2))
    dist[36] = math.sqrt(math.pow((hand[12][0] - hand[17][0]), 2) + math.pow((hand[12][1] - hand[17][1]), 2))
    dist[37] = math.sqrt(math.pow((hand[16][0] - hand[2][0]), 2) + math.pow((hand[16][1] - hand[2][1]), 2))
    dist[38] = math.sqrt(math.pow((hand[16][0] - hand[5][0]), 2) + math.pow((hand[16][1] - hand[5][1]), 2))
    dist[39] = math.sqrt(math.pow((hand[16][0] - hand[9][0]), 2) + math.pow((hand[16][1] - hand[9][1]), 2))
    dist[40] = math.sqrt(math.pow((hand[16][0] - hand[17][0]), 2) + math.pow((hand[16][1] - hand[17][1]), 2))
    dist[41] = math.sqrt(math.pow((hand[20][0] - hand[2][0]), 2) + math.pow((hand[20][1] - hand[2][1]), 2))
    dist[42] = math.sqrt(math.pow((hand[20][0] - hand[5][0]), 2) + math.pow((hand[20][1] - hand[5][1]), 2))
    dist[43] = math.sqrt(math.pow((hand[20][0] - hand[9][0]), 2) + math.pow((hand[20][1] - hand[9][1]), 2))
    dist[44] = math.sqrt(math.pow((hand[20][0] - hand[13][0]), 2) + math.pow((hand[20][1] - hand[13][1]), 2))

    for i in range(1, len(datas[0])):
        dist[i] = dist[i] / dist[0] * 100

    return dist


if __name__ == "__main__":
    main()